Description: |
  Creates a Lambda function that invokes other Lambda functions with
  SQS events.

Parameters:
  QueueToFunctionMapping:
    Description: |
      The list of SQS queue URLs and corresponding Lambda function
      names. Separate queue urls, function names, and pairs with commas:
      <queue_url_1>,<function_1>,<queue_url_2>,<function_2>.
      There must be an odd number of commas.
    Type: String

  Frequency:
    Description: |
      How often you want the specified SQS queues checked. If you choose
      "Continuous", a Lambda function will be constantly running, waiting for
      items in the queue. If you choose "1Minute", the Lambda function will
      only run every minute and check every queue. This can result in drastically
      reduced Lambda cost, at the expense of waiting up to a minute for items
      to become visibile in the queue before being processed by your functions.
    Type: String
    Default: Continuous
    AllowedValues:
      - Continuous
      - 1Minute

Outputs: {}

Conditions:
  EnableMinutePoll:
    Fn::Equals:
      - Ref: Frequency
      - 1Minute

Resources:

  ### IAM Setup

  SQSToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-to-sqs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  # TODO: Should we list the configured queues and functions here?
                  # Will blank ones cause any problems? One problem is that queues
                  # are supplied with URLs, and functions with names. (No ARNs.)
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  ### CloudWatch Events

  CloudWatchEvent01:
    Type: AWS::Events::Rule
    Properties: &EVENT_PROPERTIES
      ScheduleExpression: cron(0/5 * * * ? *)
      Targets:
        - Arn:
            Fn::GetAtt:
              - SQSToLambdaFunction
              - Arn
          Id:
            Ref: SQSToLambdaFunction

  CloudWatchEvent02:
    Type: AWS::Events::Rule
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      ScheduleExpression: cron(1/5 * * * ? *)

  CloudWatchEvent03:
    Type: AWS::Events::Rule
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      ScheduleExpression: cron(2/5 * * * ? *)

  CloudWatchEvent04:
    Type: AWS::Events::Rule
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      ScheduleExpression: cron(3/5 * * * ? *)

  CloudWatchEvent05:
    Type: AWS::Events::Rule
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      ScheduleExpression: cron(4/5 * * * ? *)

  ### Lambda Function

  SQSToLambdaFunctionPermission1:
    Type: AWS::Lambda::Permission
    Properties: &PERMISSION_PROPERTIES
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SQSToLambdaFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent01
          - Arn

  SQSToLambdaFunctionPermission2:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent02
          - Arn

  SQSToLambdaFunctionPermission3:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent03
          - Arn

  SQSToLambdaFunctionPermission4:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent04
          - Arn

  SQSToLambdaFunctionPermission5:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent05
          - Arn

  SQSToLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Invokes Lambda functions with items from SQS queues.
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - SQSToLambdaRole
          - Arn
      Runtime: nodejs
      Timeout: 300
      Code:
        ZipFile:
          Fn::Join:
          - ""
          - - 'var CONFIG = "'
            - Ref: QueueToFunctionMapping
            - '".split(","); var ONCE = "'
            - Ref: Frequency
            - '" === "1Minute";'
            - !minify ./src/sqs-to-lambda.js
