Description: |
  Creates a Lambda function that invokes other Lambda functions with
  SQS events.

Parameters:
  QueueToFunctionMapping:
    Description: |
      The list of SQS queue URLs and corresponding Lambda function
      names. Separate queue urls, function names, and pairs with commas:
      <queue_url_1>,<function_1>,<queue_url_2>,<function_2>.
      There must be an odd number of commas.
    Type: String

  Frequency:
    Description: |
      How often you want the specified SQS queues checked. If you choose
      "Continuous", a Lambda function will be constantly running, waiting for
      items in the queue. If you choose "1Minute", the Lambda function will
      only run every minute and check every queue. This can result in drastically
      reduced Lambda cost, at the expense of waiting up to a minute for items
      to become visibile in the queue before being processed by your functions.
    Type: String
    Default: Continuous
    AllowedValues:
      - Continuous
      - 1Minute

Outputs: {}

Conditions:
  EnableMinutePoll:
    Fn::Equals:
      - Ref: Frequency
      - 1Minute

Resources:

  ### IAM Setup

  SQSToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-to-sqs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  # TODO: Should we list the configured queues and functions here?
                  # Will blank ones cause any problems? One problem is that queues
                  # are supplied with URLs, and functions with names. (No ARNs.)
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  SetupCloudwatchEventsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: setup-cloudwatch-events
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - events:DeleteRule
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*


  ### Custom Resource

  CloudWatchEvent1:
    Type: Custom::CloudWatchEvent
    Properties: &EVENT_PROPERTIES
      ServiceToken:
        Fn::GetAtt:
          - SetupCloudwatchEventsFunction
          - Arn
      Region:
        Ref: AWS::Region
      TargetFunction:
        Ref: SQSToLambdaFunction
      TargetFunctionArn:
        Fn::GetAtt:
          - SQSToLambdaFunction
          - Arn
      RuleNamePrefix: rule1-
      ScheduleExpression: cron(0/5 * * * ? *)

  CloudWatchEvent2:
    Type: Custom::CloudWatchEvent
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      RuleNamePrefix: rule2-
      ScheduleExpression: cron(1/5 * * * ? *)

  CloudWatchEvent3:
    Type: Custom::CloudWatchEvent
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      RuleNamePrefix: rule3-
      ScheduleExpression: cron(2/5 * * * ? *)

  CloudWatchEvent4:
    Type: Custom::CloudWatchEvent
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      RuleNamePrefix: rule4-
      ScheduleExpression: cron(3/5 * * * ? *)

  CloudWatchEvent5:
    Type: Custom::CloudWatchEvent
    Condition: EnableMinutePoll
    Properties:
      <<: *EVENT_PROPERTIES
      RuleNamePrefix: rule5-
      ScheduleExpression: cron(4/5 * * * ? *)

  ### Lambda Functions

  SetupCloudwatchEventsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates a 5 minute CloudWatch rule on the specified function.
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - SetupCloudwatchEventsRole
          - Arn
      Runtime: nodejs
      Timeout: 300
      Code:
        ZipFile: "<inserted by build script>"

  SQSToLambdaFunctionPermission1:
    Type: AWS::Lambda::Permission
    Properties: &PERMISSION_PROPERTIES
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SQSToLambdaFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent1
          - RuleArn

  SQSToLambdaFunctionPermission2:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent2
          - RuleArn

  SQSToLambdaFunctionPermission3:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent3
          - RuleArn

  SQSToLambdaFunctionPermission4:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent4
          - RuleArn

  SQSToLambdaFunctionPermission5:
    Type: AWS::Lambda::Permission
    Condition: EnableMinutePoll
    Properties:
      <<: *PERMISSION_PROPERTIES
      SourceArn:
        Fn::GetAtt:
          - CloudWatchEvent5
          - RuleArn

  SQSToLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Invokes Lambda functions with items from SQS queues.
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - SQSToLambdaRole
          - Arn
      Runtime: nodejs
      Timeout: 300
      Code:
        ZipFile:
          # Yes, this code is written inside YAML. What it does is
          # start off pollers for each configured queue/function. The pollers
          # will keep polling until they hit the "target time", which is 5
          # seconds before the function timeout. When a poller finishes, it
          # calls d() which keeps track of how many are running. When 0 are
          # running, it exits cleanly with context.done(). Any errors from SQS
          # or Lambda result in the poller stopping. This is probably not ideal.
          # (The polling will resume the next time the function runs of course,
          # but if the errors are throttling errors, it may mean we'll get way
          # behind on the queue.)
          Fn::Join:
          - ""
          - - 'var CONFIG = "'
            - Ref: QueueToFunctionMapping
            - '".split(","); var ONCE = "'
            - Ref: Frequency
            - '" === "1Minute";'
            - "<inserted by build script>"
