{
  "Description": "Creates a Lambda function that invokes other Lambda functions with\nSQS events.\n",
  "Parameters": {
    "QueueToFunctionMapping": {
      "Description": "The list of SQS queue URLs and corresponding Lambda function\nnames. Separate queue urls, function names, and pairs with commas:\n<queue_url_1>,<function_1>,<queue_url_2>,<function_2>.\nThere must be an odd number of commas.\n",
      "Type": "String"
    },
    "Frequency": {
      "Description": "How often you want the specified SQS queues checked. If you choose\n\"Continuous\", a Lambda function will be constantly running, waiting for\nitems in the queue. If you choose \"1Minute\", the Lambda function will\nonly run every minute and check every queue. This can result in drastically\nreduced Lambda cost, at the expense of waiting up to a minute for items\nto become visibile in the queue before being processed by your functions.\n",
      "Type": "String",
      "Default": "Continuous",
      "AllowedValues": [
        "Continuous",
        "1Minute"
      ]
    }
  },
  "Outputs": {},
  "Conditions": {
    "EnableMinutePoll": {
      "Fn::Equals": [
        {
          "Ref": "Frequency"
        },
        "1Minute"
      ]
    }
  },
  "Resources": {
    "SQSToLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "lambda-to-sqs-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:Invoke*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "SetupCloudwatchEventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "setup-cloudwatch-events",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutRule",
                    "events:PutTargets",
                    "events:RemoveTargets",
                    "events:DeleteRule"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "CloudWatchEvent1": {
      "Type": "Custom::CloudWatchEvent",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SetupCloudwatchEventsFunction",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "TargetFunction": {
          "Ref": "SQSToLambdaFunction"
        },
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "SQSToLambdaFunction",
            "Arn"
          ]
        },
        "RuleNamePrefix": "rule1-",
        "ScheduleExpression": "cron(0/5 * * * ? *)"
      }
    },
    "CloudWatchEvent2": {
      "Type": "Custom::CloudWatchEvent",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SetupCloudwatchEventsFunction",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "TargetFunction": {
          "Ref": "SQSToLambdaFunction"
        },
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "SQSToLambdaFunction",
            "Arn"
          ]
        },
        "RuleNamePrefix": "rule2-",
        "ScheduleExpression": "cron(1/5 * * * ? *)"
      }
    },
    "CloudWatchEvent3": {
      "Type": "Custom::CloudWatchEvent",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SetupCloudwatchEventsFunction",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "TargetFunction": {
          "Ref": "SQSToLambdaFunction"
        },
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "SQSToLambdaFunction",
            "Arn"
          ]
        },
        "RuleNamePrefix": "rule3-",
        "ScheduleExpression": "cron(2/5 * * * ? *)"
      }
    },
    "CloudWatchEvent4": {
      "Type": "Custom::CloudWatchEvent",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SetupCloudwatchEventsFunction",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "TargetFunction": {
          "Ref": "SQSToLambdaFunction"
        },
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "SQSToLambdaFunction",
            "Arn"
          ]
        },
        "RuleNamePrefix": "rule4-",
        "ScheduleExpression": "cron(3/5 * * * ? *)"
      }
    },
    "CloudWatchEvent5": {
      "Type": "Custom::CloudWatchEvent",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SetupCloudwatchEventsFunction",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "TargetFunction": {
          "Ref": "SQSToLambdaFunction"
        },
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "SQSToLambdaFunction",
            "Arn"
          ]
        },
        "RuleNamePrefix": "rule5-",
        "ScheduleExpression": "cron(4/5 * * * ? *)"
      }
    },
    "SetupCloudwatchEventsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Creates a 5 minute CloudWatch rule on the specified function.",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "SetupCloudwatchEventsRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 300,
        "Code": {
          "ZipFile": "var e=require(\"aws-sdk\"),r=new e.CloudWatchEvents,o=require(\"cfn-response\");exports.handler=function(e,n){var s=e.ResourceProperties.TargetFunction,t=e.ResourceProperties.RuleNamePrefix+s;\"Create\"===e.RequestType||\"Update\"===e.RequestType?r.putRule({Name:t,ScheduleExpression:e.ResourceProperties.ScheduleExpression,State:\"ENABLED\"},function(s,u){if(s)return console.log(s),void o.send(e,n,o.FAILED,{});var i=u.RuleArn;r.putTargets({Rule:t,Targets:[{Id:t,Arn:e.ResourceProperties.TargetFunctionArn}]},function(r,s){return r?(console.log(r),void o.send(e,n,o.FAILED,{})):void o.send(e,n,o.SUCCESS,{RuleArn:i},t)})}):\"Delete\"===e.RequestType&&r.removeTargets({Rule:t,Ids:[t]},function(s,u){return s?(console.log(s),void o.send(e,n,o.FAILED,{})):void r.deleteRule({Name:t},function(r,s){return r?(console.log(r),void o.send(e,n,o.FAILED,{})):void o.send(e,n,o.SUCCESS,{},t)})})};"
        }
      }
    },
    "SQSToLambdaFunctionPermission1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SQSToLambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEvent1",
            "RuleArn"
          ]
        }
      }
    },
    "SQSToLambdaFunctionPermission2": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SQSToLambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEvent2",
            "RuleArn"
          ]
        }
      }
    },
    "SQSToLambdaFunctionPermission3": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SQSToLambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEvent3",
            "RuleArn"
          ]
        }
      }
    },
    "SQSToLambdaFunctionPermission4": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SQSToLambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEvent4",
            "RuleArn"
          ]
        }
      }
    },
    "SQSToLambdaFunctionPermission5": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableMinutePoll",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SQSToLambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEvent5",
            "RuleArn"
          ]
        }
      }
    },
    "SQSToLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Invokes Lambda functions with items from SQS queues.",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "SQSToLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs",
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var CONFIG = \"",
                {
                  "Ref": "QueueToFunctionMapping"
                },
                "\".split(\",\"); var ONCE = \"",
                {
                  "Ref": "Frequency"
                },
                "\" === \"1Minute\";",
                "function e(n,i,t,a){return t()<5e3?a():\"\"==n||\"\"==i?a():void s.receiveMessage({QueueUrl:n,MaxNumberOfMessages:1,WaitTimeSeconds:1},function(s,g){return s?(console.log(s),a()):g.Messages&&0!==g.Messages.length?void o.invoke({FunctionName:i,InvocationType:\"Event\",Payload:JSON.stringify({source:\"aws.sqs\",QueueUrl:n,Message:g.Messages[0]})},function(s){return s?(console.log(s),a()):e(n,i,t,a)}):r?a():e(n,i,t,a)})}var n=require(\"aws-sdk\"),s=new n.SQS,o=new n.Lambda,i=CONFIG,r=ONCE;exports.handler=function(n,s){if(0===i.length)return s.done();for(var o=i.length/2,r=function(){o-=1,0==o&&(console.log(\"exiting\"),s.done())},t=0;t<i.length;t+=2)e(i[t],i[t+1],s.getRemainingTimeInMillis,r)};"
              ]
            ]
          }
        }
      }
    }
  }
}